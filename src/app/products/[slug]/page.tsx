// app/products/[slug]/page.tsx
// Dies ist deine dynamische Produktseite fÃ¼r den Next.js App Router.
// Sie wird unter der Route /products/:slug erreichbar sein.

import { notFound } from 'next/navigation';
import { ProductService } from '@/data/productService';
import * as supabaseProductService from '@/lib/supabase-product-service';
import ProductPageContent from '@/components/productcomponents/ProductPageContent';
import Navigation from '@/components/ui/Navigation';
import Footer from '@/components/shared/Footer';

// This enables ISR for all pages generated by this route.
// It sets a time-based revalidation of 1 hour. On-demand revalidation will override this.
export const revalidate = 3600;

// Ensure this runs in Node.js runtime on Cloudflare
export const runtime = 'nodejs';

/**
 * Generates static paths for all known products at build time.
 * It combines slugs from local files and the Supabase database.
 */
export async function generateStaticParams() {
  try {
    const localSlugs = ProductService.getAllLocalSlugs();
    
    // Try to get remote slugs, but don't fail the build if Supabase is unavailable
    let remoteSlugs: { slug: string }[] = [];
    try {
      remoteSlugs = await supabaseProductService.getPublishedProductSlugs();
    } catch (error) {
      console.warn('Could not fetch remote product slugs (Supabase might not be configured):', error);
    }
    
    // Combine and deduplicate slugs
    const allSlugs = [...new Set([...localSlugs, ...remoteSlugs.map(s => s.slug)])];
    
    console.log(`Generated ${allSlugs.length} static product pages`);
    
    return allSlugs.map(slug => ({ slug }));
  } catch (error) {
    console.error('Error in generateStaticParams:', error);
    // Return at least the local slugs to prevent build failure
    const localSlugs = ProductService.getAllLocalSlugs();
    return localSlugs.map(slug => ({ slug }));
  }
}

/**
 * The product page component. It's a server component that fetches data
 * and renders the page statically.
 */
export default async function ProductPage({ params }: { params: Promise<{ slug: string }> }) {
  try {
    const { slug } = await params;
    const product = await ProductService.getProductBySlug(slug);

    // If no product is found for the given slug, render the 404 page.
    if (!product) {
      console.log(`Product not found for slug: ${slug}`);
      notFound();
    }

    return (
      <>
        <Navigation />
        <ProductPageContent product={product} />
        <Footer />
      </>
    );
  } catch (error) {
    console.error('Error rendering product page:', error);
    // Return 404 instead of crashing with 500
    notFound();
  }
}